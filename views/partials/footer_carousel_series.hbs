<script type="text/javascript" src="/js/slick.min.js"></script>

<script type="text/javascript">
    const home_url = 'https://recommender-279710.ey.r.appspot.com';

    {{#if series}}
        const series_dir = home_url + '/series';
    {{else if series_completed}}
        const series_dir = home_url + '/series/completed';
    {{/if}}
    
    function parseResponse(parsedResponse, mode){
        if(typeof parsedResponse.data.Cover !== 'undefined') document.getElementById('info-picture').src=parsedResponse.data.Cover;
        if(typeof parsedResponse.data.Name !== 'undefined') document.getElementById('info-name').innerHTML = parsedResponse.data.Name;
        if(typeof parsedResponse.data.Synopsis !== 'undefined') document.getElementById('info-description').innerHTML= 'Synopsis: ' + parsedResponse.data.Synopsis;
        
        var additionalInfo = ''; //additional information about the serie
        if(typeof parsedResponse.data.Year !== 'undefined') additionalInfo += 'Year: ' + parsedResponse.data.Year + '</p><p>';
        if(typeof parsedResponse.data.Writers !== 'undefined') additionalInfo += 'Writers: ' + parsedResponse.data.Writers + '</p><p>';
        if(typeof parsedResponse.data.Actors !== 'undefined') additionalInfo += 'Actors: ' + parsedResponse.data.Actors + '</p><p>';
        if(typeof parsedResponse.data.Tags !== 'undefined' && parsedResponse.data.Tags.length > 0) {
            additionalInfo += 'Tags: ';
            const n_tags = parsedResponse.data.Tags.length; // number of tags for this videogame
            for(var i = 0; i < n_tags-1; i++){
                additionalInfo += parsedResponse.data.Tags[i] + ', ';
            }
            additionalInfo += parsedResponse.data.Tags[n_tags-1] + '</p><p>';
        }
        if(typeof parsedResponse.data.Date_completion !== 'undefined') additionalInfo += 'Date of completion: ' + parsedResponse.data.Date_completion + '</p><p>';
        if(typeof parsedResponse.data.Linked_video !== 'undefined') additionalInfo += '</p><iframe width="420" height="315" src="' + parsedResponse.data.Linked_video.replace("watch?v=", "embed/") + '"></iframe><p>';

        document.getElementById('info-additional').innerHTML=additionalInfo;

        if (mode === 'info') {
            document.getElementById('info-title').innerHTML = 'Item information';
        } else if (mode === 'recommendation') {
            document.getElementById('info-title').innerHTML = 'Your recommendation';
            $('.center').slick('slickGoTo', parsedResponse.index, true);
        }
    }

    function showInfoCurrent(){
        // Get the center slide information
        const center_slide = document.getElementsByClassName('slick-center')[0];
        const current_slide_number = center_slide.getAttribute("data-slide-number");

        httpGetAsync(`${series_dir}/${current_slide_number}`, (res) =>{
            try{
                const parsedResponse = JSON.parse(res);
                parseResponse(parsedResponse, 'info');
            } catch(error){
                console.log(error); //throw error or flash it
            }
            
        });
    }

    function recommendMeSomething(){
        // We use the var filter (defined in carousel) to make different API calls based on the current filter applied to the slides
        var parsedResponse;
        if (filter === 'undefined') {
            httpGetAsync(`${series_dir}/any`, (res) =>{
                try{
                    parsedResponse = JSON.parse(res);
                    parseResponse(parsedResponse, 'recommendation');
                } catch(error){
                    console.log(error); //throw error or flash it
                }
            });
        } else {
            httpGetAsync(`${series_dir}/any/${filter}`, (res) =>{
                try{
                    parsedResponse = JSON.parse(res);
                    parseResponse(parsedResponse, 'recommendation');
                } catch(error){
                    console.log(error); //throw error or flash it
                }
            });
        }
    }
    
    // Request series from the database and showcase them in the carousel
    httpGetAsync(`${series_dir}/infoSeries`, (res) =>{
    try{
        const parsedResponse = JSON.parse(res);
        var addedHTMLSeries = '<div class="center">\n\t';
        for(let serie of parsedResponse) {
            if(typeof serie.Cover !== 'undefined'){
                let alt_img_name = serie.Name;
                alt_img_name = alt_img_name.replace(/\s/g, "");

                addedHTMLSeries += '<div class="content-sliders text-center';
                if(typeof serie.Tags !== 'undefined'){
                    // If the series has a list of Tags
                    for (let tag_name of serie.Tags){
                        // We add the tags existing for this serie as classes
                        addedHTMLSeries += ' ' + tag_name;
                    }
                }
                addedHTMLSeries += `" data-slide-number="${serie.Slide_number}">\n\t<img class="content-sliders-image" src="${serie.Cover}" alt="img_${alt_img_name}">\n</div>`;
            }
        }
        addedHTMLSeries += '\n</div>';
        document.getElementById('media-content-carousel').innerHTML = addedHTMLSeries;
        startCarousel();
    } catch(error){
        console.log(error); //throw error or flash it
    }
    
    });
</script>
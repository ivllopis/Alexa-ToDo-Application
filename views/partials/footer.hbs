<!--  Footer  -->


<!-- Import scripts -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

<script>
    $(document).ready(function() {
        setTimeout(function() {
            $(".alert-success").alert('close');
            $(".alert-danger").alert('close');
        }, 2000);
    });

    var previousfilterbuttonId = 'undefined';

    $('.js-filter-slides-button').on('click', function(){
        // Unfliter previously possible filters applied to the carousel
        $('.center').slick('slickUnfilter');
        
        // Obtain the filter we want to apply through the data-filter
        var filter = $(this).data('filter');

        if (previousfilterbuttonId !== 'undefined') {
            // We remove the style ('active' class) of the button of the previous applied filter
            var button = document.getElementById(previousfilterbuttonId);
            button.classList.remove('active');
        }
        // We assign this button id as the next previous filter button id
        previousfilterbuttonId = $(this).attr('id');
        
        if(filter === 'animes'){
            // Filter animes
            $('.center').slick('slickFilter', '.anime');
        } else if (filter === 'oldschool') {
            // Filter old school shows
            $('.center').slick('slickFilter', '.old-school');
        } else if (filter === 'soulslike') {
            // Filter souls-like games
            $('.center').slick('slickFilter', '.souls-like');
        }
    });

    function startCarousel(){
    $('.center').slick({
        centerMode: true,
        centerPadding: '5px', // dots: true, tengo que pensar m√°s sobre esto
        slidesToShow: 3,
        swipeToSlide: true, // custom feat.
        responsive: [
        {
            breakpoint: 1500,
            settings: {
            arrows: false,
            centerMode: true,
            centerPadding: '5px',
            slidesToShow: 3
            }
        },
        {
            breakpoint: 1080,
            settings: {
            arrows: true,
            centerMode: true,
            centerPadding: '5px',
            slidesToShow: 3
            }
        },
        {
            breakpoint: 760,
            settings: {
            arrows: true,
            centerMode: true,
            centerPadding: '5px',
            slidesToShow: 1
            }
        }
        ]
    });
    }

    function httpGetAsync(theUrl, callback)
    {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function() { 
            if (xmlHttp.readyState == 4 && xmlHttp.status == 200)
                callback(xmlHttp.responseText);
        }
        xmlHttp.open("GET", theUrl, true); // true for asynchronous 
        xmlHttp.send(null);
    }
</script>